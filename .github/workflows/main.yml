name: api-softsolutions

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      EMAIL_SUPPORT_USER: ${{ secrets.EMAIL_SUPPORT_USER }}
      EMAIL_SUPPORT_PASS: ${{ secrets.EMAIL_SUPPORT_PASS }}
      EMAIL_SUPPORT_DESTINATION: ${{ secrets.EMAIL_SUPPORT_DESTINATION }}
      NODE_ENV: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_TOKEN }}

    - name: Login no Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.USUARIO_DOCKER }}
        password: ${{ secrets.SENHA_DOCKER }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '23'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run database migrations
      run: npm run migration:run
    
    - name: Run seeds
      run: npm run seed
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run tests
      run: npm run test:e2e

    - name: Install semver
      run: npm install -g semver
    
    - name: Create initial tag if not exists
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        if [ -z "$(git tag)" ]; then
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag -a v0.0.0 -m "Initial release"
          git push origin v0.0.0
        fi
    
    - name: Calculate and generate new version
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        # Fetch tags
        git fetch --tags
        
        # Get last tag
        LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG="v0.0.0"
        fi
        
        echo "Última tag: $LAST_TAG"
        
        # Get commits since last tag
        COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
        
        # Initialize version increment flags
        MAJOR=0
        MINOR=0
        PATCH=0
        
        # Analyze commit messages
        for COMMIT in "$COMMITS"; do
          if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
            MAJOR=1
          elif [[ "$COMMIT" == *"feat"* ]]; then
            MINOR=1
          elif [[ "$COMMIT" == *"fix"* ]]; then
            PATCH=1
          fi
        done
        
        # Calculate new version
        CURRENT_VERSION=${LAST_TAG#v}
        NEW_VERSION=$CURRENT_VERSION
        
        if [[ $MAJOR -eq 1 ]]; then
          NEW_VERSION=$(semver -i major $CURRENT_VERSION)
        elif [[ $MINOR -eq 1 ]]; then
          NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
        elif [[ $PATCH -eq 1 ]]; then
          NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
        fi
        
        # Adiciona sufixo beta para a branch develop
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          NEW_VERSION="${NEW_VERSION}-beta.$(date +%Y%m%d)"
        fi
        
        echo "Nova versão: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Update package.json version
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && env.new_version != ''
      run: |
        CURRENT_PKG_VERSION=$(node -p "require('./package.json').version")
        echo "Versão atual no package.json: $CURRENT_PKG_VERSION"
        echo "Nova versão calculada: ${{ env.new_version }}"
        
        if [[ "$CURRENT_PKG_VERSION" != "${{ env.new_version }}" ]]; then
          npm version ${{ env.new_version }} --no-git-tag-version
          echo "Versão atualizada com sucesso!"
        else
          echo "Versão já está atualizada, pulando..."
        fi

    - name: Criar a imagem Docker
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && env.new_version != ''
      env:
        DATABASE_URL: ""
        JWT_SECRET: ""
        EMAIL_SUPPORT_USER: ""
        EMAIL_SUPPORT_PASS: ""
        EMAIL_SUPPORT_DESTINATION: ""
      run: |
        # Sempre cria a tag versionada
        docker build \
          --no-cache \
          -t ${{ secrets.USUARIO_DOCKER }}/backend:${{ env.new_version }} \
          .
        
        # Só cria tag latest na main
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          docker tag ${{ secrets.USUARIO_DOCKER }}/backend:${{ env.new_version }} ${{ secrets.USUARIO_DOCKER }}/backend:latest
        fi

    - name: Push para o Docker Hub
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && env.new_version != ''
      run: |
        # Sempre faz push da versão específica
        docker push ${{ secrets.USUARIO_DOCKER }}/backend:${{ env.new_version }}
        
        # Só faz push do latest na main
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          docker push ${{ secrets.USUARIO_DOCKER }}/backend:latest
        fi

    - name: Commit and push new version
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && env.new_version != ''
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        
        # Verificar se há mudanças no package.json
        if git diff --quiet package.json; then
          echo "Nenhuma mudança no package.json, pulando commit..."
        else
          git add package.json
          git commit -m "chore(release): version ${{ env.new_version }}"
          git tag v${{ env.new_version }}
          
          # Push to appropriate branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            git push origin main --tags
          else
            git push origin develop --tags
          fi
        fi
    
    # Email Notification
    - name: Send email on failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{secrets.EMAIL_ORIGEM}}
        password: ${{secrets.SENHA_EMAIL}}
        subject: Workflow Failure in GitHub Actions
        body: |
          The GitHub Actions workflow for ${{ github.repository }} has failed.
          
          Workflow: ${{ github.workflow }}
          Action: ${{ github.action }}
          Repository: ${{ github.repository }}
          
          Check the Actions tab for more details.
        to: ${{secrets.EMAIL_DESTINO}}
        from: ${{secrets.EMAIL_ORIGEM}}